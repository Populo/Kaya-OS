main:
    - populate 4 new areas of registers
        - set stack pointer (last page of physical) (all 4 same?)
        - set PC
        - set status register (all 4 are the same)
            - VM off
            - Interrupts masked
            - Supervisor mode on
    - initPCBs
    - initASL

    - initialize phase 2 global variables

    - p = allocatePCB()
        - initialize the p_s
            - stack pointer to the penultimate page of physical memory
            - PC (p2test)
            - status:
                - VM off
                - Interrupts enabled/unmasked
                - supervisor mode on
        processCount++
        insertProcQ(&readyQue, p)

        scheduler()

pointers:
	address in memory

struct:
	template over section in memory
	state_t *foo = (state_t *)0x2000008C;
	foo -> s_pc = (memaddr) IntHandler; (in interrupt.c/e)
	foo -> s_t9 = (memaddr) IntHandler; <--------- always do both at the same time 

RAMTOP
	particular memory location
	devregarea_t *foo2 = (devregarea_t *)0x1000000;
	foo2 -> s_sp = foo2->rambase + foo2->ramsize 


scheduler:
	gets control at the end of main
	pcb_PTR currP = removeProcQ(&readyQueue);
	if (currP == NULL) -- error
	else
	runningProcess = currP;
	Load a timer with the value of a quantum (manual, 5, 50, 500?)
	LDST(&(currP -> pcb_s));
	

	special conditions
		what if there are no more processes?
			processCount == 0
				HALT();
		what if processCount > 0, but the readyQueue is empty?
			2 cases
				softBlockCnt (waiting for IO to complete) == 0
					PANIC
				softBlockCnt > 0
					suspended animation
						wait bit in the status register
							need to modify current state:
								wait bit is on
								interrupts are enabled


Syscall IntHandler
	255 syscalls
	9 - 255 -> pass up or die
	1 - 8 && process in kernel mode
		handle each individually
	1 - 8 && user mode
		privileged instruction program trap
		(only allowed in kernel mode)
		
pull up and die
	sys5 
		which type of trap
		address to be stored in old area
		address to be stored in new area
	puad
		a) has a sys5 for that type been called?
			new == null = no
			no: terminate process
			yes: copy the state that caused the exception (oldXXX from const) to location specified in pcb
		LDST(current -> newXXX)
